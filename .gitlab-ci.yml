image: docker:latest
services:
- docker:18.06.0-dind

variables:
  DOCKER_DRIVER: overlay
  CONTAINER_URL: registry.gitlab.com
  CONTAINER_PATH: /vibent/vibent-ui
  CONTAINER_IMAGE: ${CONTAINER_URL}${CONTAINER_PATH}

stages:
- build
- dockerize
- deploy-dev
- deploy-prod

build:env:
  stage: build
  image: alpine:3.9
  script:
  - apk add jq
  - echo "VERSION=$(jq -r ".version" ./package.json)" > env.sh
  artifacts:
    paths:
    - env.sh

.build:
  stage: build
  image: node:8.11.3
  script:
  - npm install
  - npm rebuild node-sass
  - npm run build-${BUILD_TARGET}
  artifacts:
    paths:
    - dist-*

build:npm:dev:
  extends: .build
  except:
  - develop
  variables:
    BUILD_TARGET: dev
build:npm:dev-i18n:
  extends: .build
  only:
  - develop
  variables:
    BUILD_TARGET: dev-i18n
build:npm:prod-i18n:
  extends: .build
  only:
  - develop
  variables:
    BUILD_TARGET: prod-i18n

dockerize:
  stage: dockerize
  only:
  - develop
  when: manual
  allow_failure: false
  script:
  - source env.sh
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CONTAINER_URL
  - docker pull $CONTAINER_IMAGE:latest || true
  - docker build --cache-from $CONTAINER_IMAGE:latest --tag $CONTAINER_IMAGE:$VERSION --tag $CONTAINER_IMAGE:latest .
  - docker push $CONTAINER_IMAGE:$VERSION
  - docker push $CONTAINER_IMAGE:latest

deploy-dev:
  stage: deploy-dev
  only:
  - develop
  script:
  - apk add --update curl && rm -rf /var/cache/apk/*
  - curl -X POST -d "{\"token\":\"$AWS_UTIL_TOKEN\",\"restart\":\"vibent-ui-dev\"}" https://admin.vibent.com

deploy-prod:
  stage: deploy-prod
  only:
  - develop
  when: manual
  script:
  - apk add --update curl && rm -rf /var/cache/apk/*
  - curl -X POST -d "{\"token\":\"$AWS_UTIL_TOKEN\",\"restart\":\"vibent-ui-prod\"}" https://admin.vibent.com
